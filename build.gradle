/*
 * Mortvana's Master build file
 * Based on Tinker's Construct's and Applied Energergistics' build files
 */

// This sets us up for building a forge project - you need all of these
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

// Load ForgeGradle
// Apply the forge plugin - this adds all the magic for automatically obfuscating, deobfuscating, etc.
apply plugin: 'forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "v0.0.1-1"
group = "mortvana.artmisc" // This is our group.
archivesBaseName = "ArtificersMiscellanea" // This is our actual project within the group.

// Setup the forge minecraft plugin data.
minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    //mappings = 'stable_12' //This seems to break stuff
    runDir = "run"
}

repositories {
    maven {
        name = "ChickenBones's Maven Fileserver"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "Professor Mobius's Maven Fileserver"
        url = "http://mobiusstrip.eu/maven"
    }
    maven {
        name = "ProgWML6's Maven Fileserver"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "Forge Maven Fileserver"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "sfPlayer1's Maven Fileserver"
        url = "http://maven.ic2.player.to"
    }
    maven {
        name = "Enderio Maven Fileserver"
        url = "http://maven.tterrag.com"
    }
    maven {
        name = "FireBall1725's API Depot"
        url = "http://dl.tsr.me/artifactory/libs-release-local"
    }
    maven {
        name = "RX14 Maven Fileserver"
        url = "http://mvn.rx14.co.uk/repo"
    }
    maven {
        name = "OpenComputers Maven Fileserver"
        url = "http://maven.cil.li"
    }
    maven {
        name = "MM repo"
        url = "http://maven.k-4u.nl/"
    }
    maven {
        name = "Ephys"
        url "https://tehnut.info/maven/"
    }

    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 7200, 'hours'
}

// Add Coremod Manifest and Classifier (if I wanted one)
jar {
    manifest {
		attributes 'FMLAT': 'FluxGear_at.cfg'
		//attributes 'FMLCorePlugin': 'tconstruct.preloader.TConstructLoaderContainer'
        //attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    //classifier = 'universal'
    // Specify which files are really included, can control which APIs should be included.
    /*include "fluxgear/**"
    include "assets/**"
    include "mcmod.info"
    include "pack.mcmeta"*/
}

/*sourceSets {WTF Gradle, why aren't you working?
    main {
        java {
            srcDirs += "src/api/main"
            srcDirs += "src/main/java"
        }

        resources {
            srcDir "src/main/resources", "mcmod.info"
            //"pack.mcmeta"
        }
    }
}*/

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // we're omitting the .xcf files - they're development only
    exclude '**/*.xcf'

    // replace stuff in files
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.lang'
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, that's not the files above
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.lang'
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

// Create de-obfuscated development jars, because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        include "mortvana/**"
        include "assets/**"
        include "mcmod.info"
    }
    classifier = 'deobf'

    // Coremod Stuff
    manifest {
        attributes 'FMLAT': 'FluxGear_at.cfg'
        //attributes 'FMLCorePlugin': 'tconstruct.preloader.TConstructLoaderContainer'
        //attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar, dependsOn:classes) {
    from sourceSets.main.allSource
    classifier = 'src'
}

// No APIs... Yet...
// Create API library jar
task apiJar(type: Jar) {
    from(sourceSets.api.java) {
        include "mortvana/thaumrev/api/*"
    }
    from(sourceSets.main.output) {
        include "mortvana/thaumrev/api/*"
    }

    classifier = 'api'
}

// Add a javadoc jar
task javadocs(type: Javadoc) {
    source = sourceSets.main.java
    include "mortvana/thaumrev/api**"

    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadocs) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

artifacts {
    archives deobfJar
    archives sourceJar
    //archives javadocJar
    //archives apiJar
}



configurations {
    mods
    shade
    compile.extendsFrom shade
    compile.extendsFrom exportedCompile
}

dependencies {
    compile "mantle:Mantle:1.7.10-0.3.2.jenkins191:deobf" //Anything above this and mappings change
    compile "tconstruct:TConstruct:1.7.10-1.8.8.build990:deobf"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"
    compile "codechicken:EnderStorage:1.7.10-1.4.7.37:dev"
    compile "codechicken:Translocator:1.7.10-1.1.2.15:dev"
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev" //exclude group: 'mcp.mobius.waila'
    compile "mcp.mobius.jabba:Jabba:1.2.1a_1.7.10:dev"
    compile "net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev"
    compile "com.enderio.core:EnderCore:1.7.10-0.2.0.31_beta:dev"
    compile "com.enderio:EnderIO:1.7.10-2.3.0.423_beta:dev"
    compile "net.sengir.forestry:forestry_1.7.10:4.2.16.64:dev"
    //complie "binnie:binnie_mods_1.7.10"
    //compile "net.mcft.copy.betterstorage:BetterStorage:1.7.10-0.11.3.123.20:deobf"
    //compile "inventorytweaks:InventoryTweaks:1.58:deobf"
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.5.12.26:dev"
    //compile "com.mod-buildcraft:buildcraft:7.1.14:dev"
    compile "pneumaticCraft:PneumaticCraft-1.7.10:1.10.0-109:userdev"
    compile "team.chisel:Chisel:dev-3.0-19-9828898:deobf"
    compile "nf.fr.ephys.tsteelworks:TSteelworks:1.7.10-1.1.2-20:deobf"
    compile "nf.fr.ephys.cookiecore:CookieCore:1.7.10-1.4.0-11:deobf"
    compile "exnihilo:Ex-Nihilo:1.38-53:deobf"

    // So Chisel keeps it's Drulloy Pants on
    compile "org.projectlombok:lombok:1.16.4"
    shade ("team.chisel.ctmlib:CTMLib:9177141-4") {
        transitive = false
    }

    compile fileTree(dir: 'lib', include: '*.jar')
    //deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}

/* *=-=-=-=* CodeChickenCopy *=-=-=-=* */

// Searches for NEI and CodeChicken stuff from our compile set and adds them
// to the mods folder in our run directory.
task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from configurations.compile
    include "**/*CodeChicken*.jar", "**/*NotEnoughItems*.jar"
    // Because CodeChickenCore downloads it automatically anyways...
    exclude "**/*CodeChickenLib*.jar"
    into file(minecraft.runDir + "/mods")
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

tasks.setupDevWorkspace.dependsOn copyChicken
tasks.setupDecompWorkspace.dependsOn copyChicken

/* *=-=-=-=* IntelliJ IDEA *=-=-=-=* */

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        //sourceDirs += file('dummy')
        //sourceDirs += file('api')
    }
}
